#include <bits/stdc++.h> 
using namespace std;
int MOD = 1e9+7;
int countPartitions(int n, int d, vector<int> &arr) {
    // s1-s2 = d  && s1+s2 = totalsum
    int totalsum = accumulate(arr.begin(),arr.end(),0);

        if(totalsum < d || (totalsum+d)%2)return 0;
        int k = (totalsum+d)/2;
        vector<vector<int>>dp(n+1,vector<int>(k+1,-1));
        ////// edge case -> if there is zero present in array then the no of ways sum can be zero will not be 1
        int countzero = 0;
        dp[0][0] = 1;
        for(int ind = 1; ind <= n; ind++)
        {
            if(arr[ind-1] == 0)countzero++;
            dp[ind][0] = pow(2,countzero);
        }
        for(int sum = 1; sum <= k; sum++)
        {
            dp[0][sum] = 0;
        }
        for(int ind = 1; ind <= n; ind++)
        {
            for(int sum = 1; sum <= k; sum++)
            {
                if(arr[ind-1] <= sum)
                {
                    dp[ind][sum] = (dp[ind-1][sum-arr[ind-1]] + dp[ind-1][sum])%MOD;
                }
                else
                dp[ind][sum] = dp[ind-1][sum];
            }
        }
    return dp[n][k];
}


