/////// ****** recursive dp ******* //////
class Solution {
    int solve(int n , int k ,vector<int>&nums,vector<vector<int>>&dp)
    {
        if(k == 0)return 1;
        if(n == 0)return 0;
        
        if(dp[n][k] != -1)return dp[n][k];

        // can pick
        if(nums[n-1] <= k)
        {
            return (solve(n-1,k-nums[n-1],nums,dp)) || (solve(n-1,k,nums,dp));
        }

        // can not pick
        else
        {
            return solve(n-1,k,nums,dp);
        }
    }
public:
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int total_sum = accumulate(nums.begin(), nums.end(), 0);
        if(total_sum%2 != 0)return false;
        int k = total_sum/2;
        vector<vector<int>>dp(n+1,vector<int>(k+1,-1));
        solve(n, k, nums, dp);
    }

////// ******* top down appraoch ********* ////////
public:
    bool canPartition(vector<int>& nums) {
        int n = nums.size();
        int total_sum = accumulate(nums.begin(), nums.end(), 0);
        if(total_sum%2 != 0)return false;
        int k = total_sum/2;
        vector<vector<int>>dp(n+1,vector<int>(k+1,-1));
        //// initialization -> base condition ///  k = 0 ->1 , else n = 0 -> 0
        for(int ind = 0; ind <= n; ind++)
        {
            dp[ind][0] = 1;
        }
        for(int sum = 1; sum <= k; sum++)
        {
            dp[0][sum] = 0;
        }
        for(int ind = 1; ind <= n; ind++)
        {
            for(int sum = 1; sum <= k; sum++)
            {
                //can pick 
                if(nums[ind-1] <= sum)
                {
                    dp[ind][sum] = (dp[ind-1][sum-nums[ind-1]] || dp[ind-1][sum]);
                }
                //can not pick
                else
                dp[ind][sum] = dp[ind-1][sum];
            }
        }
        return dp[n][k];
};
