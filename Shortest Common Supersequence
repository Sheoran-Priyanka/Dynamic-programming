///////// *********** recursive dp -> top down *********** ////////////

class Solution {
    string solve(int n1, int n2, string &str1, string &str2,vector<vector<string>>&dp)
    {
        if(n1 == 0 || n2 == 0)return "";

        if(dp[n1][n2] != "")return dp[n1][n2];
        if(str1[n1-1] == str2[n2-1])
        {
            return dp[n1][n2] = solve(n1-1, n2-1, str1, str2, dp) + str1[n1-1];
        }
        else
        {
            string s1 = solve(n1-1, n2, str1, str2, dp);
            string s2 = solve(n1, n2-1, str1, str2, dp);
            if(s1.size() > s2.size())
            return dp[n1][n2] = s1;
            else
            return dp[n1][n2] = s2;
        }
    }
public:
    string shortestCommonSupersequence(string str1, string str2) {
        int n1 = str1.size(), n2 = str2.size();
        vector<vector<string>>dp(n1+1,vector<string>(n2+1,""));
        string lcs = solve(n1, n2, str1, str2, dp);
        string scs ;
        int lcssize = lcs.size();
        int ind1 = 0, ind2 = 0, j =0;
        while(j < lcssize)
        {
            if(str1[ind1] == lcs[j] && str2[ind2] == lcs[j])
            {
                scs += lcs[j];
                ind1++;ind2++;j++;
            }
            else
            {
                if(str1[ind1] != lcs[j]){
                scs += str1[ind1];
                ind1++;
                }
                if(str2[ind2] != lcs[j]){
                scs += str2[ind2];
                ind2++;
                }
            }
        }
        while(ind1 < n1)
        {
            scs += str1[ind1];
            ind1++; 
        }
        while(ind2 < n2)
        {
            scs += str2[ind2];
            ind2++; 
        }
        return scs;
    }
};


////////// ******** tabulation -> top down ************ //////////
class Solution {
public:
    string shortestCommonSupersequence(string str1, string str2) {
        int n1 = str1.size(), n2 = str2.size();
        vector<vector<int>>dp(n1+1,vector<int>(n2+1,0));
        // string lcs = solve(n1, n2, str1, str2, dp);
        for(int ind1 = 1; ind1 <= n1; ind1++)
        {
            for(int ind2 = 1; ind2 <= n2; ind2++)
            {
                if(str1[ind1-1] == str2[ind2-1])
                dp[ind1][ind2] = 1+dp[ind1-1][ind2-1];
                else
                {
                    dp[ind1][ind2] = max(dp[ind1][ind2-1], dp[ind1-1][ind2]);
                }
            }
        }
        string lcs;
        int ind1 = n1, ind2 = n2;
        while(ind1 > 0 && ind2 > 0)
        {
            if(str1[ind1-1] == str2[ind2-1])
            {
                lcs += str1[ind1-1];
                ind1--; ind2--;
            }
            else
            {
                if(dp[ind1-1][ind2] > dp[ind1][ind2-1])
                {
                    ind1--;
                }
                else
                {
                    ind2--;
                }
            }
        }
        reverse(lcs.begin(), lcs.end());
        // cout<<lcs<<endl;
        string scs ;
        int lcssize = lcs.size();
        ind1 = 0, ind2 = 0; int j =0;
        while(j < lcssize)
        {
            if(str1[ind1] == lcs[j] && str2[ind2] == lcs[j])
            {
                scs += lcs[j];
                ind1++;ind2++;j++;
            }
            else
            {
                if(str1[ind1] != lcs[j]){
                scs += str1[ind1];
                ind1++;
                }
                if(str2[ind2] != lcs[j]){
                scs += str2[ind2];
                ind2++;
                }
            }
        }
        while(ind1 < n1)
        {
            scs += str1[ind1];
            ind1++; 
        }
        while(ind2 < n2)
        {
            scs += str2[ind2];
            ind2++; 
        }
        return scs;
    }
};
