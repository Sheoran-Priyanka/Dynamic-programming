//// ********** recursion ************* ///////

// int maxi = 0;
// void solve(int n1, int n2, string &str1, string &str2, int len)
// {
//   if (n1 == 0 || n2 == 0) {
//       maxi = max(maxi,len);
//     return;
//   }

//     if(str1[n1-1] == str2[n2-1])
//     {
//         solve(n1-1,n2-1,str1,str2,len+1);
//     }
//         maxi = max(maxi,len);
//         solve(n1-1, n2, str1, str2, 0);
//         solve(n1, n2-1, str1, str2, 0);
//     return;
    
// }

// int lcs(string &str1, string &str2){
//     int n1 = str1.size(),n2 = str2.size();
//     solve(n1,n2,str1,str2,0);
//     return maxi;
// }

///////// ******** tabulation *********** //////////
int lcs(string &str1, string &str2){
	int n = str1.size(),m = str2.size();
	vector<vector<int>>dp(n+1,vector<int>(m+1,0));
	for(int i = 0; i <= n ; i++)dp[i][0] = 0;
	for(int j = 0; j <= m; j++)dp[0][j] = 0;
	int ans = 0;
	for(int ind1 = 1; ind1<=n; ind1++)
	{
		for(int ind2 = 1; ind2 <= m; ind2++)
		{
			if(str1[ind1-1] == str2[ind2-1])
			{
				dp[ind1][ind2] = 1+dp[ind1-1][ind2-1];
				ans = max(ans,dp[ind1][ind2]);
			}
			else
			dp[ind1][ind2] = 0;

		}

	}
	return ans;
	
}
